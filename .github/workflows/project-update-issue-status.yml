name: Update issue Status

on:
  workflow_call:
    inputs:
      github-org:
        type: string
        default: specklesystems
        description: The organisation the project belongs to
      project-number:
        type: number
        default: 11
        description: The project number where the issue should be updated
      issue-id:
        type: string
        required: true
      status-name:
        type: string
        default: "Closed"
    secrets:
      GHPROJECT_TOKEN:
        required: true

env:
  GITHUB_TOKEN: ${{ secrets.GHPROJECT_TOKEN }}

jobs:
  update_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Get project data
        run: |
          gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
            query ($org: String!, $number: Int!) {
              organization(login: $org) {
                projectV2(number: $number) {
                  id
                  title
                  field(name: "Status") {
                    ... on ProjectV2SingleSelectField {
                      id
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }' -f org=${{ inputs.github-org }} -F number=${{ inputs.project-number }} > project_data.json

          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.field.id' project_data.json) >> $GITHUB_ENV

          echo 'DONE_ID='$(jq '.data.organization.projectV2.field.options[] | select(.name== ${{ inputs.status-name }}) | .id' project_data.json) >> $GITHUB_ENV

      - id: add-issue
        name: Add Issue to project
        run: |
          item_id="$( gh api graphql -f query='
            mutation ($project: ID!, $id: ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $id}){
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f id=${{ inputs.issue-id }} --jq '.data.addProjectV2ItemById.item.id')"

          echo 'ITEM_ID='$item_id >> $GITHUB_OUTPUT

      - name: Update Status
        run: |
          gh api graphql --header 'GraphQL-Features: projects_next_graphql' 
            -f query='mutation($project:ID!, $status:ID!, $id:ID!, $value:String!) {
              updateProjectV2ItemFieldValue(
                input: {
                  projectId: $project
                  itemId: $id
                  fieldId: $status
                  value: $value
                }
              ) {
                projectV2Item {
                  id
                }
              }
            }' 
            -f project=$PROJECT_ID
            -f status=$STATUS_FIELD_ID
            -f id=${{ steps.add-issue.outputs.ITEM_ID }}
            -f value=$DONE_ID
